Imagina la recursión como una forma de resolver un problema grande dividiéndolo en versiones más pequeñas de sí mismo, una y otra vez, hasta que llegas
a un punto tan simple que puedes resolverlo directamente. Luego, usas esa solución simple para construir la respuesta al problema un poco más grande,
y así sucesivamente, hasta que resuelves el problema original.

Para que esto funcione, necesitas tres "ingredientes" principales, justo como los mencionaste:

La función "auto-referenciable" (con parámetros):
Una función recursiva es, por definición, una función que se llama a sí misma dentro de su propia definición. Para que cada llamada sea una versión
"más pequeña" del problema, la función debe aceptar parámetros que cambien con cada llamada. Esto le permite trabajar en una parte diferente del problema
en cada paso. Aunque se podría usar una variable global, es mucho más común y una mejor práctica usar parámetros para mantener la función "pura" y más
fácil de entender.

El "Alto" o Caso Base:
Este es el punto de parada crucial. Si no tuvieras un caso base, la función se llamaría a sí misma infinitamente, lo que provocaría un error (un "Stack Overflow"). El caso base es la condición en la que el problema es tan simple que ya no necesitas dividirlo más; tienes una respuesta directa. Cuando se alcanza el caso base, la función deja de llamarse a sí misma y devuelve un valor que inicia la "cascada" de retornos.

La "Reducción" y la Llamada Recursiva:
Aquí es donde ocurre la magia. En cada llamada recursiva (que no sea el caso base), la función hace dos cosas:

Realiza algún trabajo o cálculo para acercarse a la solución.
Se llama a sí misma con parámetros que representan una versión más pequeña o simplificada del problema original. El resultado de esta llamada recursiva
se usa luego para ayudar a construir la solución del problema actual. Piensa en esto como pedirle a tu "yo del futuro" (la llamada recursiva) que resuelva
la parte más pequeña, para que tú puedas terminar la tuya.

Analogía
Piensa en el problema de contar cuántos escalones tiene una escalera.

Problema original: Contar todos los escalones.

Función recursiva: contarEscalones(escalonActual)

Parámetro: escalonActual (el escalón en el que estás).

Caso Base: Si estás en el último escalón (el suelo al final de la escalera, o escalonActual == 0), entonces el número de escalones que te quedan es 0.
¡Parada! Devuelves 0.

Reducción y Llamada Recursiva: Si no estás en el último escalón, sabes que tienes al menos un escalón más (el que estás pisando ahora).
¿Cómo sabes cuántos más hay? Le pides a tu "yo del futuro" que cuente los escalones a partir del siguiente (contarEscalones(escalonActual - 1)).
Cuando tu "yo del futuro" te dé su respuesta, simplemente le sumas 1 (por el escalón actual).

Así, la función se vería algo así (en un lenguaje hipotético):

funcion contarEscalones(escalonesRestantes):
    si escalonesRestantes es 0:  // Caso Base
        retorna 0
    sino: // Reducción y Llamada Recursiva
        retorna 1 + contarEscalones(escalonesRestantes - 1)
Cada vez que la función se llama, los escalonesRestantes disminuyen, hasta que llegan a 0. En ese momento, las llamadas empiezan a regresar,
sumando 1 en cada paso, hasta que obtienes el total de escalones.

¡Espero que esta explicación y analogía te ayuden a solidificar aún más tu comprensión! La recursión es un concepto poderoso y elegante en la programación.